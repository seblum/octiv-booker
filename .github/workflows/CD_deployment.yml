name: Deployment CD

env:
  DOCKERREPO: seblum/octivbooker


on:
  workflow_dispatch:
  push:
    paths:
      - 'pyproject.toml'  # This will trigger the workflow only if pyproject.toml is changed
    
      
jobs:
  get-tag:
    name: Get Tag
    runs-on: ubuntu-latest
    outputs:
      PACKAGE_VERSION: ${{ steps.extract_version.outputs.PACKAGE_VERSION }}
      versions_changed: ${{ steps.compare_versions.outputs.versions_changed }}
    steps:
      - 
        name: Checkout code
        uses: actions/checkout@v4
      -  
        name: Extract version from pyproject.toml
        id: extract_version
        run: |
          VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' ./pyproject.toml)
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_OUTPUT
      - 
        name: Get previous version
        id: get_previous_version
        run: |
          PREVIOUS_VERSION=$(git show HEAD~1:pyproject.toml | sed -n 's/^version = "\(.*\)"/\1/p')
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
      - 
        name: Compare versions
        id: compare_versions
        run: |
          if [ "${{ steps.extract_version.outputs.PACKAGE_VERSION }}" = "${{ steps.get_previous_version.outputs.PREVIOUS_VERSION }}" ]; then
            echo "Version has not changed. Exiting."
            echo "versions_changed=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Version has changed. Proceeding."
            echo "versions_changed=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: "ðŸ“¦ Build & Push : ${{ matrix.tags }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tags: ["latest","v${{ needs.get-tag.outputs.PACKAGE_VERSION }}"]
    needs: get-tag
    if: ${{ needs.get-tag.outputs.versions_changed }}
    steps:
      - 
        name: Checkout code
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ./poetry.Dockerfile
          push: true
          tags: ${{ env.DOCKERREPO }}:${{ matrix.tags }}
